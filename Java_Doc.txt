GITHUB LINK
======================================================================
https://github.com/arindamslt/AECCOREJAVAAPRIL2025BATCH2.git
======================================================================
DATE:16.04.2025
============================================================================================
FEATURES OF JAVA
=============================================================
1.PLATFORM INDEPENDENT
2.OBJECT ORIENTED PROGRAMMING
3.DISTRIBUTED
4.MULTITHREADING
COMPILE THE JAVA PROGRAM
================================================================
javac X.java===JAVA COMPILER======JAVA BYTES CODES====X.class
=============================================================
RUN THE JAVA PROGRAM
==============================================================
java X====JVM(JAVA VIRTUAL MACHINE)===o/p
==============================================================
JVM=-==JAVA VIRTUAL MACHINE
IT IS AN ABSTRACT MACHINE WHOSE PURPOSE TO EXECUTE COMPILED JAVA CLASS
=================================================================
JDK===JAVA DEVELOPMENT TOOL KIT====JAVA COMPILER+JRE
JRE====JAVA RUNTIME ENVIRONMENT====JRE+JVM
JVM====JAVA VIRTUAL MACHINE======JIT IS PART OF JVM
JIT====JUST IN TIME COMPILER

==========================================================================
NOTEPAD
NOTEPAD++
IDE==INGRATED  DEVELOPMENT ENVIRONMENT
====================================
ECLIPSE IDE,NETNEANS,INTELIJII,STS
========================================
JAVA17 ONWARDS
ECLIPSE EE VERSION

======================================================================
OBJECT ORIENTED PROGRAMMING
=====================================================================================
CLASS
OBJECT==REAL WORLD ENTITY
CLASS==COLLECTION OF OBJECTS WITH COMMON PROPERTIES AND BEHAVIOUR
        IT IS A DEAD TEMPLATE
CHAIR TABLE BOOKSHELF FURNITURE
LENGTH
WIDTH
HEIGHT===================COMMON PROPERTIES
KEEPINGSOMETHING()
UML===UNIFIED MODELLING LANGUAGE
==============================================================
PURPOSE
==========================================================
TO DRAW THE CLASS DIAGRAM
WORKSSPACE
=====================================================================
FEATURES OF OBJECT ORIENTED PROGRAMMING
=====================================================================
1.ENCAPSULATION
===================================================================
CROCIN650
BINDING OF DATA AND METHOD TOGETHER
==========================================================================
TYPES OF VARIABLE
==========================================================================
1.INSTANCE VARIABLE====DECLARED AT CLASS LEVEL
2.LOCAL VARIABLE=======DECLARED AT THE METHOD LEVEL
3.STATIC VARIABLE
===============================================================================
2.POLYMORPHISM
===============================================================================
POLY==MANY
MORPHISM==FORMS
TYPES OF POLYMORPHISM
================================================
1.STATIC POLYMORPHISM======DETECT AT THE COMPILATION TIME
2.DYNAMIC POLYMORPHISM=====DETECT AT THE RUN TIME
TASK(int a,int b)
TASK(int a.float b)
TASK()
TASK(5,6)
TASK(5,6.5)
METHOD OVERLOADDING
===============================================
SAME METHOD WITH DIFFERENT ARGUMENT PASSING IN THE SAME BUT BODY IS DIFFRENT
CONSTRUCTOR
===================================================
CONSTRUCTOR IS THE SAME NAME OF CLASS NAME.IT IS NOT EVENT VOID OR RETURN TYPE
BECAUSE IT RETURN A CLASS ITESELF.
PURPOSE
=================================================
1.OBJECT CREATION
2.AT THE TIME OF OBJECT CREATION INITIALIZE THE OBJECT
CONSTRUCTOR OVERLOADDING
INHERITANCE
=============================================
AQURING THE PROPERTY FROM ONE CLASS TO ANOTHER CLASS
============================================================================
TYPES OF INHERITANCE
==================================================
1.SINGLE INHERITANCE
2.MULTILEVEL INHERITANCE
3.HIERARCHICAL INHERITANCE
DYNAMIC POLYMORPHISM
============================================
DYNAMIC POLYMORPHISM IS CALLED METHOD OVERRIDDING
METHODOVERRING
==============================================
SAME METHOD NAME BOTH IN PARENT AS WELL AS CHILD CLASS BUT BODY IS DIFFERENT
UTILITY OF SUPER KEYWORD
=========================================================
1.CALL THE SUPER CLASS CONSTRUCTOR
2.CALL THE SUPER CLASS METHOD WHICH IS HIDDEN IN SUBCLASS
MULTIPLE INHERITANCE IS NOT SUPPORTED IN JAVA DUE TO AMBIGUITY PROBLEM.
MULTIPLE INHERITANCE WILL BE OVERCOME BY MEANS OF INTERFACE
ABSTRACT CLASS
================================================================================
IF THE CLASS AT LEAST ONE ABSTRACT METHOD.THEN THE CLASS TERMED AS AN ABSTRACT CLASS
abstract class Tst
{
  public abstract void show();
void display()
{

}
}
ABSTRACT METHOD
=====================================================
THE METOD WITHOUT BODY IS CALLED ABSTRACT METHOD
EX:public abstract void show();
WE CAN'T CREATE THE OBJECT OF ABSTRACT CLASS
==========================================================================================
DATE:17.04.2025
=========================================================================================

public abstract void display();


class Test
{
  int x=25;
   public void show()
   {

    }

}
 Test t=new Test();
Test t1;//OBJECT REFERENCE
int x;
DYNAMIC BINDING
=========================================================
DYNAMIC BINDING DECIDES AT THE RUNTIME WHICH OBJECTS WHICH METHOD TO BE CALLED.
MODIFIER
====================================================================================
MODIFIER TELLS HOW A MEMBER OF A CLASS IS BEING ACCESSED INTO ANOTHER CLASS

LIST OF MODIFIERS
========================================
PRIVATE==============================
PUBLIC           ACCESS SPECIFIER
PROTECTED
DEFAULT==============================
STATIC
FINAL
ABSTRACT
SYNCHRONIZED
NATIVE
==========================================
PACKAGE
===============================================
COLLECTION OF SIMILLAR TYPES OF CLASS GROUP TOGETHER INTO A UNIT CALLED PACKAGE

PRIVATE MEMEBRS ARE ACCESSABLE SAME CLASS ONLY.
DEFAULT MEMBER ARE ACCESSABLE SAME CLASS AND IT'S SUBCLASS BUT MUST BE IN SAME PACKAKE
PROTECTED AND PUBLIC MEMBERS ARE ACCESSABLE SAME CLASS AND IT'S SUBCALSS MAY BE IN
DIFFERENT PACKAGE.
=====================================================================================
STATIC
==========================================================
THE STATIC ACCESSABLE WITH THE CLASS NAME.NO NEED TO CREATE A OBJECT FOR ACCESS THE STATIC MEMBER.
STATIC MEMBER ARE ACCESSABLE IN THE STATIC METHOD
STATIC BLOCK
================================================================
static
{


}
STATIC BLOCK EXECUTES ONLY ONE AND IT EXECUTES FIRST.
IT ACCESS ONLY STATIC VARIABLE AND STATIC METHOD

IF WE DECLARE THE VARIABLE IS FINAL IT IS A CONSTANT
IF WE DECLARE THE METHOD IS IT CAN'T BE OVERRIDDEN
IF WE DECLARE THE CLASS IS FINAL IT CAN'T BE EXTENDED
=============================================================================
THIS
================================================================================
INVOKE THE CURRENT OBJECT
WHEN
===========================================
WHEN INSTANCE VARIABLE AND THE LOCAL VARIABLE IS SAME
INVOKING ONE METHOD WITHIN ANOTHER METHOD IF BOTH ARE IN SAME CLASS.
===============================================================================
SUPER
=================================================================================
1.CALL THE SUPER CLASS CONSTRUCTOR
2.CALL THE SUPER CLASS METHOD WHICH IS HIDDEN IN SUBCLASS
=================================================================================
NETSED CLASS
==========================================
CLASS WITH IN CLASS
class X
{

    class Y =====INNER CLASS===NON STATIC NESTED CLASS IS CALLED INNER CLASS
    {


    }

}
============================================================================
INTERFACE
==============================================================================

INTERFACE IS AN CONTRACT BETWEEN THE CLIENT CODE AND IMPLEMENTED CLASS
public interface Test
{


}
BY DEFAULT ALL  METHODS ARE PUBLIC AND ABSTRACT
======================================================================================
ABSTRACT CLASS VS INTERFACE
======================================================================================
CONSOLE INPUT OUTPUT
======================================================================================
TWO WAYS
=====================================
BUFFERREADER CLASS
SCANNER CLASS======import java.util.*;
===================================================================================
DATE:18.04.2025
=================================================================================
EXCEPTION HANDELLING
=================================================================================
ERROR VS EXCPETION
================================================================

EXCEPTION IS AN EVENT WHICH OCCUR DURING THE EXECUTION PROGRAM.
WHEN YOU HANDLE THE EXCEPTION IT WILL PREVENT THE ABNORMAL TERMINATION PROGRAM.

HIERARCHY OF EXCEPTION

TYPES OF EXCEPTION
==========================
UNCHECKED=========RUNTIME EXCEPTION AND IT'S SUBCLASS CALLED UNCHECKED EXCEPTION
CHECKED============OTHER THAN RUNTIME EXCEPTION ANS IT'S SUBCLASS CALLED CHECKED EXCEPTION
CUSTOM EXCEPTION
===============================
EXCEPTION HANDLE BY
==================================
TRY
CATCH
FINALLY
THROW
THROWS
EXCEPTION HANDELLING MESSAGE
========================================
ExceptionObject.printstacktrace()====EXCEPTION NAME ALONG WITH PACKAGE NAME
                                      EXCEPTION MESSAGE
                                     LINE NUMBER WHERE EXCEPTION OCCUR
System.out.println(ExceptionObject);==== EXCEPTION NAME ALONG WITH PACKAGE NAME
                                         EXCEPTION MESSAGE

System.out.println(ExceptionObject.getMessage());===ONLY MESSAGE WILL BE DISPLAYED
FINALLY
=====================================================
WHETHER EXCEPTION OCCUR OR NOT IT ALWAYS EXECUTE
PURPOSE
=================================================
CLEANING UP TASK
============================================================
THROWS
===========================================================
WHEN YOU DO NOT USE TRY AND CATCH FOR EXCEPTION HANDELLING BUT STILL WANT TO HANDLE
THE EXCEPTION THEN YOU CAN USE THROWS CLAUSE ALONG WITH THE METHOD.
BUT THROWS SHOULD BE USED IN BOTH CALLER AS WELL AS CALLE ENVIRONMENT
THROW KEYWORD
============================================================
IT IS USED WHEN YOU HAVE TO THROW THE EXCEPTION EXPLICITLY.
LIST OF EXCEPTION
======================================
1.NullPointerException
2.InputMismatchException
3.NumberFormatException
4.ArrayIndexOutOfBoundException
5.ClassNotFoundException
6.SQLException
7.InterruptedException
8.IOException
=================================================================================
 FLOW OF EXCEPTION
====================================================================================
STRING
======================================================================================
STRING IS A IMMUTABLE OBJECT
String s=new String("ARUP");//STRING OBJECT
String s1="ARUP";//STRING LITERAL
======================================================================================
String s1="KOLKATA"
String S2="KOLKATA";
salesperson
====================================
KOLKATA
DELHI
MUMBAI
HYDRABAD
StringBuffer
StringBuilder
s.concat
s1.concat
LIST OF IMPORTANT IN STRING
===============================================================================
isEmpty()
toUpperCase()
toLowerCase()
indexOf()
substring()
trim()
replace()
split()
===================================================================================
DATE:19.04.2025
===================================================================================
MULTITHREADING
============================================================================
1.MULTIPROCESSING
========================================================================
MULTIPLE PROCESS ARE RUNNING BY MULTIPLE CPU SIMULTENEOUSLY
2.MULTITASKING
=========================================================
MUTIPLE TASKS ARE RUNNING SIMULTENEOUSLY BY SINGLE CPU
3.MULTITHREADING
====================================================
MULTIPLE THREAD ARE RUNNING SIMULTENEOUSLY
THREAD
===========================================================
SMALLEST UNIT OF DEPATCHABLE CODE
================================================================
LIFECYLCE OR STAGES OF THREAD
=============================================================
CREATION OF THREAD
=========================================================
THREAD CAN BE CREATED IN TWO WAYS
=========================================================
1.BY EXTENDING THE THREAD CLASS
2.BY IMPLEMENTING RUNNABLE INTERFACE
java.lang.Thread
class Test extends Thread
{


}
class X extends Y
{

}
  class X extends Thread,Y
{


}
class X extends Y implements Ruunable
{

}

IMPLEMENTS RUNNABLE ALWAYS BETTER THAN EXTENDING THREAD CLASS
REASON
==================================================================================
1.WHEN WE EXTENDS THE THREAD CLASS,THE CLASS BECOMES HEAVY.
2.IF ANY CHILD CLASS WANT TO GET THREAD FACILITY,IT IS NOT POSSIBLE IN JAVA BECAUSE
JAVA DOES NOT SUPPORT MULTIPLE INHERITANCE.BUT IN CASE OF IMPLEMENTS RUNNABLE
IT IS POSSIBLE
=====================================================================================
THREAD SCHEDULING
=====================================================================================
PRIORITY
========================================================================================
THREAD PRIORITIES
==================================
1.MAX===10
2.NORM===5 =====DEFAULT
3.MIN====1
VALUES RANGES BETWEEN 1 TO 10
DAEMON THREAD IS THE LOW PRIORITY THREAD
MAIN THREAD DOES NOT WAIT FOR DAEMON THREAD TO FINISH THE JOB
DAEMON IS RUNNING IN  BACKGROUND
=============================================================================
1.SHARED RESOURCE
2.SYNCHRONIZATION
3.MUTEX
4.CRITICAL SECTION
5.DEADLOCK
================================================================================
SYNCHRONIZATION CAN BE DONE TWO WAYS
===============================================================================
1.BY USING SYNCHRONIZED KEYWORD
2.BY USING SYNCHRONIZED BLOCK
================================================================================
wait()
notify()
notifyAll()
==================================================================================

CONSUMER PRODUCER PROBLEM
=================================================================================
DATE:20.04.2025
==================================================================================
COLLECTION FRAMEWORK
===================================================================================

ARRAY
================================================================================
PROBLEM AREAS IN ARRAY
=================================================
1.IT IS IN FIXED SIZE
2.IT ALLOW ONLY HOMOGENEOUS ELEMENTS
COLLECTION
====================================================================
COLLECTION IS AN OBJECT WHICH HOLDS GROUP OF OBJECTS.THESE INDIVUAL OBJECTS
ARE CALLED ELEMENTS.THIS BELONGS java.util.*;
ARRAY                   VS                        COLLECTION
=============================================================================
IT IS IN FIXED SIZE                    IT IS DYNAMIC
IT ALLOW ONLY HOMOGENEOUS ELEMEMTS     IT ALLOW BOTH HOMOGENEOUS AND HETEROGENEOUS ELEMENTS
IN CASE OF MEMORY MANAGEMENT IT        IN CASE OF MEMORY MANAGEMENT IT IS RECOMMENDED
IS  NOT RECOMMENDED
PERFORMANCE WISE ARRAY BETTER
THERE IS NO UNDERLYING DATA STRUCTURE   THERE IS  UNDERLYING DATA STRUCTURE INVOLVED.

IS THERE.THEREFORE NO PREDEFINED METHODS  THEREFORE PREDEFINED METHODS ARE THERE
==============================================================================================
import java.util.*;

ARRAYLIST
=======================================
1.DYNAMIC ARRAY
2.INSERTION ORDER PRESERED
2.UNDERLYING DATASTRUCTURE IS GROWABLE OR RESIZABLE ARRAY
4.IT ALLOW BOTH HOMOGEMEOUS AND HETEROGENEOUS ELEMENTS
CURSOR
===========================================
1.ITERATOR
2.LISITERATOR
3.ENUMERATION
HASHSET
===============================
1.UNDERLYING DATASTRUCTURE IS HASHTABLE
2.DATA WILL BE FETCHED BASED ON HASHCODE
3.IT IS BASED FOR SEARCHING TEACHNIQUE
4.NO  DUPLICATION ALLOWED
5.SUPPORT BOTH HOMOGENEOUS AND HETEROGENEOUS ELEMENTS.
=========================================================================
Comparable==compareTo()
Comparator===compare
=========================================================================
MAP 
==========================================================================
MAP IS A COMBINATION OF KEY & VALUE PAIR.
HERE KEY PART ARE NOT DUPLICATED 
VALUE PART MAY BE DUPLICATED

POJO CLASS
================================================================
PLAIN OLD JAVA OBJECT
====================================
CONSTRUCTOR
GETTER()   SETTER()
toString()
=========================================================================
LOGIN IN MYSQL
======================================
THREE WAYS
====================================
1.MYSQL WORKBENCH
2.MYSQL COMMAND LINE CLIENT
3.COMMAND PROMPT
============================================
DBMS
=============================================
DATABASE MANAGEMENT SYSTEM
DBMS==DATABASE+SQL(STRUCTED QUERY LANAGUAGE)
JAVA,C++====HLL==COMPILER/INTERPRETER====0,1
ARRAY
STORING DATA
FETCH DATA
BOTH HOW PART AND WHAT PART KNOWN TO US
SQL===4TH GEN==NON PROCEDUARL LANGUAGE
SELECT * FROM STUDENT;
HOW PART IS NOT KNOWN TO US ONLY WHAT PART IS KNOWN TO US
RDBMS==RELATIONAL DATABASE MANAGEMENT SYSTEM
CREATE TABLE STIDENT
(ROLLNO  INT,
 SNAME   VARCHAR(25),
 DEPTNM  VARCHAR(25)
);
DESC STUDENT;
INSERT INTO STUDENT VALUES(1,'SAYAN','IT');
SELECT * FROM STUDENT;












